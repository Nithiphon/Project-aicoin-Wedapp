# app.py
import gradio as gr
from ultralytics import YOLO
from PIL import Image
import numpy as np
import cv2
import os

MODEL_PATH = "best.pt"  # ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (22MB)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
model = YOLO(MODEL_PATH)

VALUE_MAP = {"1baht": 1, "5baht": 5, "10baht": 10}

def predict(img):
    """
    ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û (PIL / ndarray) -> ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ bbox ‡πÄ‡∏õ‡πá‡∏ô numpy array, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ)
    """
    if img is None:
        return None, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏™‡πà‡∏á‡∏°‡∏≤"
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô PIL -> ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy RGB
    if isinstance(img, Image.Image):
        img_np = np.array(img.convert("RGB"))
    else:
        img_np = img

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (YOLO ‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£)
    # ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô aspect ratio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ bbox ‡∏ï‡∏£‡∏á
    h, w = img_np.shape[:2]
    scale = 640 / max(h, w) if max(h, w) > 640 else 1.0
    if scale != 1.0:
        new_w, new_h = int(w * scale), int(h * scale)
        img_resized = cv2.resize(img_np, (new_w, new_h))
    else:
        img_resized = img_np

    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    results = model(img_resized, conf=0.45, save=False)
    res = results[0]

    # ‡∏ß‡∏≤‡∏î bbox (ultralytics result.plot() ‡πÉ‡∏´‡πâ BGR)
    plotted = res.plot()  # BGR numpy
    plotted_rgb = cv2.cvtColor(plotted, cv2.COLOR_BGR2RGB)

    # ‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    coin_count = {"1baht": 0, "5baht": 0, "10baht": 0}
    total_value = 0
    try:
        for box in res.boxes:
            cls_id = int(box.cls[0])
            class_name = model.names[cls_id]
            if class_name in VALUE_MAP:
                coin_count[class_name] += 1
                total_value += VALUE_MAP[class_name]
    except Exception:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ boxes ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°
        pass

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
    lines = []
    for k, v in coin_count.items():
        lines.append(f"{k}: {v} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‚Üí {v * VALUE_MAP[k]} ‡∏ö‡∏≤‡∏ó")
    if sum(coin_count.values()) == 0:
        summary = "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û"
    else:
        summary = "\n".join(lines) + f"\n\nüí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_value} ‡∏ö‡∏≤‡∏ó"

    return plotted_rgb, summary


# ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏î‡πâ‡∏ß‡∏¢ Gradio
title = "ü™ô Thai Coin Detector (YOLOv8)"
description = "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏ó‡∏¢ (1, 5, 10 ‡∏ö‡∏≤‡∏ó)"

with gr.Blocks() as demo:
    gr.Markdown(f"# {title}\n\n{description}")
    with gr.Row():
        with gr.Column(scale=1):
            input_img = gr.Image(type="pil", label="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û / ‡∏ñ‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°")
            btn = gr.Button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        with gr.Column(scale=1):
            output_img = gr.Image(type="numpy", label="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (bounding boxes)")
            output_text = gr.Textbox(label="‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•", interactive=False)

    btn.click(predict, inputs=input_img, outputs=[output_img, output_text])

# ‡∏ñ‡πâ‡∏≤ run ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á: ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ó‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ share=True (‡πÅ‡∏ï‡πà‡∏ö‡∏ô Spaces ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
if __name__ == "__main__":
    demo.launch()
